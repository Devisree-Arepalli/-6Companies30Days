5Q1)MINIMUM SUM  DIFFERENCE PARTITION

lass Solution{

  public:
	int minDifference(int arr[], int n) 
	{ 
	   sort(arr,arr+n) ;
	   int sum  ;
	   sum  = accumulate(arr,arr+n,0) ;
	   int half = sum/2 ;
	   vector<vector<int>> dp(n+1 , vector<int> (half+1 ,0)) ;
5Q11)CONSTRUCT-QUARD-TREE

class Solution {
public:
    
  Node * solve(vector<vector<int>>& grid , int rowstart , int rowend ,int colstart , int colend , int factor)
 
  {
      int sum = 0;  
      for(int i=rowstart ;  i <rowend ; i++)
      {
          for(int j = colstart ; j < colend ; j++) 
          {
              sum += grid[i][j] ;
          }
      }
      
      
      Node * dp ;
      
      if(sum ==0) 
          dp = new Node(false ,true) ;
      
      else if(sum == (factor * factor))
          
          dp = new Node(true , true) ;
      
      
      else 
      {
            dp = new Node(false,false);
            factor/=2 ;
          
            dp->topLeft = solve(grid,rowstart,rowstart+factor,colstart,colstart+factor,factor);
          
            dp->topRight = solve(grid,rowstart,rowstart+factor,colstart+factor,colend,factor);
          
            dp->bottomLeft = solve(grid,rowstart+factor,rowend,colstart,colstart+factor,factor);
          
            dp->bottomRight = solve(grid,rowstart+factor,rowend,colstart+factor,colend,factor);
      }
       return dp ;
  }
    
    
    
    Node* construct(vector<vector<int>>& grid) {
        int n = grid.size() ;
        if(n==0) return NULL ;
        Node* ans;
        ans = solve(grid,0,n,0,n,n) ;
        return ans;
    }
};
5Q12)COURSE-SCHEDULE

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> res ;
        vector<int> indegree(numCourses ,0) ;
        vector<vector<int>> graph(numCourses,vector<int>()) ;
   
        for (vector<int> &pre : prerequisites) {
            graph[pre[1]].push_back(pre[0]);
            indegree[pre[0]] ++ ;
        }
    
      queue<int> q ;
      for(int i=0;i<indegree.size() ; i++) {
        if(indegree[i]==0) 
            q.push(i) ;
      }
      
      ///BFS KIND OF APPROACH 
      while(q.empty() == false) {
        auto u = q.front() ;
        q.pop() ;
        res.push_back(u) ;
        for(auto v : graph[u])
        {
          indegree[v] -- ;
          if(indegree[v] ==0) 
            q.push(v) ;
        }    
      }
        
        if(res.size() == numCourses) 
          return res ;
        else 
          return {} ;
      
    }
};
5Q13)MINIMUM SWAPS TO ARRANGE A BINARY-GRID.


class Solution {
public:
    int minSwaps(vector<vector<int>>& grid) 
    {
         int n = grid.size() ; vector<int>arr(n);
        
        for(int i=0; i<n; i++)
        {
            int count = 0;
            for(int j=n-1; j>=0; j--)
            {
                if(grid[i][j] !=0)
                {
                    break;
                }
                count++;
            }
            arr[i] = count;
        }
        
        int swaps = 0;
        for(int i=0;i<n;i++)
        {   
            int req_trailing_zero = (n-1)-i ;
            
            if(arr[i] >= req_trailing_zero)
            {
                continue;
            }
            int val = arr[i] ;
            int j = i+1 ;
            while(j<n)
            {
                swap(val,arr[j]) ;  
                if(val >= req_trailing_zero)
                {
                    break;
                }
               j++ ;
            }
            
            if(j == n)
            {
                return -1;
            }
            swaps += (j-i) ; // for this window 
            arr[i] = val ;
        }
        
        return swaps ; 
    }
};
5Q14)AS FAR FROM LAND AS POSSIBLE


class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        
        vector<vector<int>>visited (n,vector<int>(n,0));
        
        queue<pair<int,int>> q ;
        // BFS approach 
        
        int water = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j] == 1)
                {
                    visited[i][j] = 1;
                    q.push({i,j});
                }
                else{
                    water++;
                }
            }
        }
        
        if(q.size() == 0 or water == 0)
        {
            return -1;
        }
        
        vector<vector<int>>DIR  = {{0,1},{1,0},{0,-1},{-1,0}};
        
        int res  = -1;
        while(!q.empty())
        {
              
            int K = q.size();
            //cout<<sz<<endl;
            for(int i=0;i<K;i++)
            {
                
                auto p = q.front();
                q.pop();
                
                int r = p.first;
                int c = p.second;
                
                for(int j=0;j<4;j++)
                {
                    
                    int new_r = r + DIR[j][0];
                    int new_c = c + DIR[j][1];
                    
             if(new_r >= 0 && new_r < n && new_c >= 0 && new_c < n && !visited[new_r][new_c])
                {
                        q.push ({new_r,new_c});
                        visited[new_r][new_c] = 1;
                    }
                }
                
            }
            res++;
        }
        
        
        return res; 
    }
};
5Q15)lass Solution {
public:
  
  // BINARY SEARCH APPLICATION HERE IT IS 
  
  bool possible(int mid , vector<int> & piles , int H) {
    int total =0 ;
    int n = piles.size() ;
    for(int i=0; i< n ; i++) {
      int x = piles[i]/mid ;
      int y =piles[i] % mid ;
      if(y) { x ++ ; }
        total += x ;
      
    }
  
    return (total <=H) ;
  }
  
    int minEatingSpeed(vector<int>& piles, int H) {
        int l = 1 ;
        int r = (int)(1e9+1) ;
        while(l<r) {
          int mid = l + (r-l)/2 ;
          if(possible(mid,piles,H)) 
              r = mid ;
          else
              l = mid+1 ;
        }
      return l ;
    }
};
Q2)SEARCH WORD
class Solution {
public:
bool dfs(vector<vector<char>>&board,string word,int s,int e)
{
    bool flag;
    //for(int i=s;i<=board.length();i++)

if(word.size()==0)
    return  flag=true;
    
    if(s<0||s>=board.size()||board[s][e]!=word[0]||e<0||e>=board[0].size())
    return false;
    //  int dx[]={-1,0,1,0};
    // int dy[]={0,1,0,-1};
      char ch=board[s][e];
      board[s][e]='#';
     string temp= word.substr(1);
     flag=dfs(board,temp,s-1,e)||dfs(board,temp,s,e+1)||dfs(board,temp,s+1,e)||dfs(board,temp,s,e-1);
     board[s][e]=ch;
     return flag;
}
 bool isWordExist(vector<vector<char>>& board, string word) {
        // Code here
        for(int i=0;i<board.size();i++)
        for(int j=0;j<board[0].size();j++)
       if( dfs(board,word,i,j))
         return true;
    }
};

5Q3)MISSING NUMBER IN THE STRING
#include<bits/stdc++.h>
using namespace std;
const int MAX_DIGITS = 5;

int missingNumber(const string& str);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string str;
        cin>>str;
        cout << missingNumber(str)<<endl;
    }
	return 0;
}
// } Driver Code Ends


/* You are required to complete this function
which return the required missing number
if present else return -1*/
int getv(const string& str,int i,int m)
{
    if(i+m>str.length())
    return -1;
    
    int val=0;
    for(int j=0;j<m;j++)
    {
        int c=str[i+j]-'0';
        if(c<0||c>9)
        return -1;
        
        val=val*10+c;
    }
    return val;
}
int missingNumber(const string& str)
{
    // Code here
    for(int m=1;m<=6;m++){
    int n=getv(str,0,m);
    if(n==-1)
    break;
    
    int missNo=-1;
    bool flag=false;
    for(int i=m;i!=str.length();i += 1+log10l(n))
    {
        if(missNo==-1 &&(getv(str,i,1+log10l(n+2))==n+2))
          {
              missNo=n+1;
              n+=2;
          }
        else if(getv(str,i,1+log10l(n+1))==n+1)
        n=n+1;
        
        else{
            flag=true;
            break;
        }
    }
    if(!flag)
      return missNo;
    }
    return -1;
}
Q4)LARGEST NO IN K-SWAPS
class Solution
{
    public:
    void findMaxUtil(string str, string &max, int k, int pos)
    {
        if(k == 0)
            return;
            
        char maxm = str[pos];
        for(int i = pos+1; i < str.length() ;i++)
        {
            if(maxm < str[i])
                maxm = str[i];
        }
        
        if(maxm != str[pos])
            k--;
            
        for(int i=str.length()-1; i>=pos ;i--)
        {
            if(str[i] == maxm)
            {
                swap(str[i], str[pos]);
                if(str.compare(max) > 0)
                    max = str;
                    
                findMaxUtil(str, max, k, pos+1);
                
                swap(str[i], str[pos]);
            }
        }
    }
    
    string findMaximumNum(string str, int k)
    {
       // code here.
       string max = str;
       findMaxUtil(str, max, k, 0);
       return max;
    }
};
5Q5)SPLIT -ARRAY LARGEST SUM
class Solution {
public:
    
    bool ispossible(vector<int>& nums, int m , int mid)
    {
        int sa_count =1 ;
        int sum  =0 ;
        for(int  i =0 ; i< nums.size() ; i++) 
        {
            sum += nums[i] ;     
            if(sum > mid)
            {
                sa_count ++ ;
                sum  = nums[i] ;
            }
        }
        
        return sa_count <= m ;
    }    
    
    int splitArray(vector<int>& nums, int m) {
        int maxi =0 ;
        int sum =0 ;
        for(auto val : nums) {
            sum += val ;
            maxi = max(maxi , val) ;
        }
        int lo = maxi ;
        int hi = sum ;
        int ans ;
        while(lo <= hi) {
            int mid = lo + (hi-lo)/2 ;
            if(ispossible(nums,m,mid)==true) {
                ans = mid ;
                hi = mid -1 ;
            }
            else {
                lo = mid +1 ;
            }
        }
        return ans ;
    }
};
5Q6)MOUNTAIN-ARRAY
class Solution {
public:
    int findInMountainArray(int target, MountainArray &Arr) 
    {
          int left = 0 ;
          int right = Arr.length() - 1;
        // Find the peak index
        while (left < right)
        {    
            int mid = left + (right - left) / 2;
            if (Arr.get(mid) < Arr.get(mid + 1))
            {
                left = mid + 1;
            } 
            else
            { 
                right = mid;
            }
        }
        
        
        int peak = left;
        // Binary search on increasing subarray
        left = 0;
        right = peak;
        while (left <= right) 
        {
            int mid = left + (right - left) / 2;
            if (Arr.get(mid) < target) 
            {
                left = mid + 1;
            } 
            else if (Arr.get(mid) > target) 
            { 
                right = mid - 1;
            } 
            else
            {
                return mid;
            }
        }
        
        // Binary search on decreasing subarray
        left = peak;
        right = Arr.length() - 1;
        while (left <= right) 
        {
            int mid = left + (right - left) / 2;
            if (Arr.get(mid) < target)
            {
                right = mid - 1;
            } 
            else if (Arr.get(mid) > target) 
            { 
                left = mid + 1;
            }
            else
            {
                return mid;
            }
        }
        
        
        return -1;
    }
};
© 2022 GitHub, Inc.
Terms
5Q7)CAPACITY TO SHIPS
class Solution {
public:
    bool ispossible(vector<int>& weights, int days, int mid) {
        int d =1 ;
        int sum  =0 ;
        for(int i=0;i<weights.size() ; i++) {
             sum += weights[i] ;
              if(sum > mid) {
                  d ++ ;
                  sum = weights[i] ;
              }
        }
        return d<=days ;
    }
    
    int shipWithinDays(vector<int>& weights, int days) {
         int maxi =0 ;
        int sum =0 ;
        for(auto val : weights)
        {
            sum += val ;
            maxi = max(maxi , val) ;
        }
        int lo = maxi ;
        int hi = sum ;
        int ans ;
        while(lo <= hi) {
            int mid = lo + (hi-lo)/2 ;
            if(ispossible(weights,days,mid)==true) 
            {
                ans = mid ;
                hi = mid -1 ;
            }
            else {
                lo = mid +1 ;
            }
        }
        return ans ;
    }
};
5Q8)BOOMERANGS
class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& p)
    {
        map<int, int> f ;
        int ans = 0;
        int n = p.size() ;
        for(int i=0; i<n ; i++)
        {
            for(int j=0; j< n; j++)
            {
                if(i==j) 
                    continue;
                else 
                {
                  int dist= (p[i][0] -p[j][0]) *(p[i][0] - p[j][0]) + 
                            (p[i][1] - p[j][1])* (p[i][1] - p[j][1]) ;
                    f[dist]++;
                }
            }
            for(auto it : f)
            {
                ans += (it.second)*(it.second - 1);
            }
            f.clear();
        }
        
        return ans; 
    }
};
5Q9)PACIFIC-ATLANTIC WATER FLOW
public:
    // ?? leetcode 417
    
    void solve(vector<vector<int>>& matrix , int i , int j , int prev ,
               vector<vector<int>>& ocean)
    {
       if(i<0 || i>= matrix.size() || j<0 || j>=matrix[0].size())
       {
           return  ;
       }   
        if(ocean[i][j] == 1) // no need for dfs
            return  ;
        if(matrix[i][j] < prev) // no need for dfs 
            return  ;
        
        ocean[i][j]=1 ;
        
        solve(matrix,i+1,j,matrix[i][j],ocean) ;
        solve(matrix,i-1,j,matrix[i][j],ocean) ;
        solve(matrix,i,j+1,matrix[i][j],ocean) ;
        solve(matrix,i,j-1,matrix[i][j],ocean) ;
              
    }
    
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
        vector<vector<int>> ans  ;
        int n = matrix.size() , m = matrix[0].size();
        if(n<1) return ans ;
        
        
        vector<vector<int>> pacific(n, vector<int> (m,0)) ;
        vector<vector<int>> atlantic(n , vector<int>(m,0)) ;
        
        for(int col =0 ; col< m ; col++)
        {
            solve(matrix,0,col,INT_MIN , pacific) ;
            solve(matrix,n-1 , col, INT_MIN , atlantic) ;
        }
        
           
        for(int row =0 ; row< n; row++)
        {
            solve(matrix,row,0,INT_MIN ,pacific) ;
            solve(matrix,row, m -1, INT_MIN ,atlantic) ;
        }
        
        
        for(int i=0;i<n;i++) 
        {
            for(int j=0;j<m ;j++)
            {
               if(pacific[i][j]==1 && atlantic[i][j]==1) {
                   vector<int> v(2) ;
                   v[0]=i ;
                   v[1]=j ;
                   ans.push_back(v) ;
               } 
            }
        }
        
        return ans ;
    }
};
© 2022 GitHub, Inc.
Terms
5Q10)NO.OF PROVINCES


class Solution {
    public:
    int n=0;
  void dfs(int node, vector<vector<int>>& isConnected, vector<int>& visited)
    {
         if(visited[node] == 1) return;
        
        visited[node] = 1;
        for(int i=0; i<n; i++){
            if(i != node && isConnected[node][i] == 1){
                dfs(i, isConnected, visited);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int connectedComponent = 0;
        n = isConnected.size();
        vector<int> visited(n,0);
        
        for(int i=0; i<n; i++){
            if(visited[i] == 0){
                connectedComponent+=1;
                dfs(i,isConnected, visited);
            }
        }
        return connectedComponent;
    }
    
   
};	   
	   for(int i=0;i<n ; ++i) 
	   {
	       for(int j=1; j<=half ; j++) 
	       {
	           if(j < arr[i]) 
	           {
	               dp[i+1][j] = dp[i][j] ;
	               continue ;
	           }
	           
	           dp[i+1][j] = max({arr[i] , dp[i][j] , dp[i][j-arr[i]] + arr[i] }) ;
	       }
	   }
	   
	 return sum -dp.back().back() *2 ;
	} 
};

