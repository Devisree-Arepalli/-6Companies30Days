class Solution {
    bool checkValid(int i,int j,int r,int c)
    {
        if(i<0||i>=r|| j<0||j>=c)
            return false;
        return true;
    }
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        int count=0;
        queue<pair<int,int>>q;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j]==2)
                    q.push({i,j});
            }
        }
        
        while(!q.empty())
        {
            int n=q.size();
            bool flag=false;
            for(int k=0;k<n;k++)
            {
                int i=q.front().first;
                int j=q.front().second;
                q.pop();
                if(checkValid(i+1,j,row,col)&& grid[i+1][j]==1)
                {
                    grid[i+1][j]=2;
                    q.push({i+1,j});
                    flag=true;
                }
                if(checkValid(i-1,j,row,col)&&grid[i-1][j]==1)
                {
                    grid[i-1][j]=2;
                    q.push({i-1,j});
                    flag=true;
                }
                if(checkValid(i,j-1,row,col)&& grid[i][j-1]==1)
                {
                    grid[i][j-1]=2;
                    q.push({i,j-1});
                    flag=true;
                }
                if(checkValid(i,j+1,row,col)&&grid[i][j+1]==1)
                {
                    grid[i][j+1]=2;
                    q.push({i,j+1});
                    flag=true;
                }
            }
                if(flag==true)
                    count++;
            }
        
            for(int i=0;i<row;i++)
                for(int j=0;j<col;j++)
                    if(grid[i][j]==1)
                        return -1;
            
            return count;
        }
            
};
