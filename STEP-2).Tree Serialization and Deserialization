class Solution
{
    public:
    void Util(Node* root,vector<int> &v){
        if(root==NULL){      //check for NULL also, if NULL insert -1 there, to check for tree structure
            v.push_back(-1);
            return;
        }
        v.push_back(root->data);
        
        Util(root->left,v);
        
        
        Util(root->right,v);
    }
    vector<int> serialize(Node *root) 
    {
        //Your code here
        vector<int> v;
        Util(root,v);
        return v;
    }
    
    //Function to deserialize a list and construct the tree.
    Node* Util2(vector<int> v,int &i){
        if(i==v.size() || v[i]==-1){  //add this here
            i++;   //increment
            return NULL;
        }
        // if(v[i]==NULL){
        //     return NULL;
        // }
        int val=v[i++];
        Node* root=new Node(val);
        root->left=Util2(v,i);
        root->right=Util2(v,i);
        return root;
    }
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       int i=0;
       Node* root=Util2(A,i);
       return root;
    }

};
